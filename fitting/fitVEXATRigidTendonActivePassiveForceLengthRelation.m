%%
% SPDX-FileCopyrightText: 2024 Matthew Millard <millard.matthew@gmail.com>
%
% SPDX-License-Identifier: MIT
%
%%
function [umat43RT, ...
        vexatRTCurves] = ...
        fitVEXATRigidTendonActivePassiveForceLengthRelation(...
           expData, ...
           umat43RT, ...
           umat43SarcomereParams,...
           umat43QuadraticCurves,...
           umat43QuadraticTitinCurves,...
           keyPointsHL1997,...
           keyPointsHL2002,...
           flag_plotVEXATActivePassiveForceLengthFitting)

%%
% HL 2002
%%

umat43RTHL2002=umat43RT;

% umat43RTHL2002.lceOptAT = keyPointsHL2002.lceOptAT;
% umat43RTHL2002.fceOptAT = keyPointsHL2002.fceOptAT;
% umat43RTHL2002.lceOpt   = keyPointsHL2002.lceOptAT/cos(umat43RT.penOpt);
% umat43RTHL2002.fceOpt   = keyPointsHL2002.fceOptAT/cos(umat43RT.penOpt);
% umat43RTHL2002.ltSlk    = 0;
% umat43RTHL2002.et       = 0;

scaleSoln = [];
scaleSoln.shiftPEE = 1;
scaleSoln.scalePEE = 1;

%Here we're fitting the passive curve only.
lb = [-1;0.1];
ub = [1;2];

x0 = [0;1];
flag_fittingHL1997=0;

errFcnHL2002 = @(arg)calcVEXATRigidTendonPassiveForceLengthError(arg,...
                        scaleSoln,...
                        umat43RTHL2002,...
                        umat43SarcomereParams,...
                        umat43QuadraticCurves,...
                        umat43QuadraticTitinCurves,...
                        keyPointsHL2002.fl,...
                        keyPointsHL2002.fpe,...
                        keyPointsHL2002.lp0_active_lceNAT,...
                        keyPointsHL2002.fceOptAT,...
                        flag_fittingHL1997);


options=[];%optimset('Display','off');
[x1, resnorm,residualHL1997,exitflag] = ...
    lsqnonlin(errFcnHL2002,x0,lb,ub,options);

errVec = calcVEXATRigidTendonPassiveForceLengthError(x1,...
                        scaleSoln,...
                        umat43RTHL2002,...
                        umat43SarcomereParams,...
                        umat43QuadraticCurves,...
                        umat43QuadraticTitinCurves,...
                        keyPointsHL2002.fl,...
                        keyPointsHL2002.fpe,...
                        keyPointsHL2002.lp0_active_lceNAT,...
                        keyPointsHL2002.fceOptAT,...
                        flag_fittingHL1997);

idxFpe = [1:1:length(keyPointsHL2002.fpe.l)];
%idxFl  = [1:1:length(keyPointsHL2002.fl.l)] + max(idxFpe);
rmseHL2002.fpe = errVec(idxFpe) ./ keyPointsHL2002.fceOptAT;
rmseHL2002.fl  = nan;%errVec(idxFl) ./ keyPointsHL2002.fceOptAT;

disp('Update');
shiftPEE_HL2002 = x1(1,1)*scaleSoln.shiftPEE;
scalePEE_HL2002 = x1(2,1)*scaleSoln.scalePEE;
lp0HL2002       = keyPointsHL2002.lp0_active_lceNAT*umat43RTHL2002.lceOptAT;

umat43RTHL2002.shiftPEE     =shiftPEE_HL2002;
umat43RTHL2002.scalePEE     =scalePEE_HL2002;
umat43RTHL2002.lp0HL2002    =lp0HL2002;

%%
% HL 1997
%%
umat43RTHL1997=umat43RT;

%umat43RTHL1997.lceOptAT = keyPointsHL1997.lceOptAT;
%umat43RTHL1997.fceOptAT = keyPointsHL1997.fceOptAT;
%umat43RTHL1997.lceOpt   = keyPointsHL1997.lceOptAT/cos(umat43RT.penOpt);
%umat43RTHL1997.fceOpt   = keyPointsHL1997.fceOptAT/cos(umat43RT.penOpt);
%umat43RTHL1997.ltSlk    = 0;
%umat43RTHL1997.et       = 0;

%scaleSoln.lp0      = lceOptATGuess + ltSlkGuess;
scaleSoln = [];
scaleSoln.shiftPEE = 1;
scaleSoln.scalePEE = 1;

umat43RTHL1997.scalePEE = scalePEE_HL2002;

%All each variable is allowed to change within a reasonable amount of 
%error. Here I expect indirectly measured quantities to have up to 20% of
%error 
lb = [-3];
ub = [3];

x0 = [0];

flag_fittingHL1997 = 1;
%When fitting HL1997 we shifte the HL2002 fpe curve, but we do not
%scale it. Why? Not enough data points are present for that.

errFcnHL1997 = @(arg)calcVEXATRigidTendonPassiveForceLengthError(arg,...
                        scaleSoln,...
                        umat43RTHL1997,...
                        umat43SarcomereParams,...
                        umat43QuadraticCurves,...
                        umat43QuadraticTitinCurves,...
                        keyPointsHL1997.fl,...
                        keyPointsHL1997.fpe,...
                        keyPointsHL1997.lp0_active_lceNAT,...
                        keyPointsHL1997.fceOptAT,...
                        flag_fittingHL1997);


options=optimset('Display','off');
[x1, resnorm,residualHL1997,exitflag] = ...
    lsqnonlin(errFcnHL1997,x0,lb,ub,options);

errVec = calcVEXATRigidTendonPassiveForceLengthError(x1,...
                        scaleSoln,...
                        umat43RTHL1997,...
                        umat43SarcomereParams,...
                        umat43QuadraticCurves,...
                        umat43QuadraticTitinCurves,...
                        keyPointsHL1997.fl,...
                        keyPointsHL1997.fpe,...
                        keyPointsHL1997.lp0_active_lceNAT,...
                        keyPointsHL1997.fceOptAT,...                        
                        flag_fittingHL1997);


shiftPEE_HL1997     = x1(1,1)*scaleSoln.shiftPEE;
lp0HL1997           = keyPointsHL1997.lp0_active_lceNAT*umat43RTHL1997.lceOptAT;

idxFpe = [1:1:length(keyPointsHL1997.fpe.l)];
%idxFl = [1:1:length(keyPointsHL1997.fl.l)] + max(idxFpe);
rmseHL1997.fpe = errVec(idxFpe) ./ keyPointsHL1997.fceOptAT;
rmseHL1997.fl  = nan;%errVec(idxFl) ./ keyPointsHL1997.fceOptAT;

%Update umat43RTHL1997
umat43RTHL1997.lp0HL1997= lp0HL1997; 
umat43RTHL1997.shiftPEE = shiftPEE_HL1997;


%%
% Update the model's parameters
%%

switch expData
    case 'HL1997'
        umat43RT = umat43RTHL1997;
        umat43RT.lp0HL2002 = umat43RTHL2002.lp0HL2002;
    case 'HL2002'
        umat43RT = umat43RTHL2002;
        umat43RT.lp0HL1997 = umat43RTHL2002.lp0HL1997;
    otherwise
        assert(0,'Error: expData must be HL1997 or HL2002');
end



%%
% Sample the curves of the model:
%  fal, f1, f2, fecm, ft
%%
npts=100;

lceNMin = umat43QuadraticCurves.activeForceLengthCurve.xEnd(1,1)-0.1;
lceNMax = umat43QuadraticCurves.activeForceLengthCurve.xEnd(1,2)+0.1;
lceN   = [lceNMin:((lceNMax-lceNMin)/(npts-1)):lceNMax]';

vexatRTCurves.fl.lceNAT   = zeros(size(lceN));
vexatRTCurves.fl.fceNAT   = zeros(size(lceN));
vexatRTCurves.fl.rmse = sqrt(mean([rmseHL1997.fl;rmseHL2002.fl].^2));

vexatRTCurves.fpe.lceNAT  = zeros(size(lceN));
vexatRTCurves.fpe.fceNAT  = zeros(size(lceN));

switch expData
    case 'HL1997'
        vexatRTCurves.fpe.rmse    = sqrt(mean(rmseHL1997.fpe.^2));
    case 'HL2002'
        vexatRTCurves.fpe.rmse    = sqrt(mean(rmseHL2002.fpe.^2));
    otherwise
        assert(0,'Error: expData must be HL1997 or HL2002');
end

vexatRTCurves.f1.lceNAT   = zeros(size(lceN));
vexatRTCurves.f1.fceNAT   = zeros(size(lceN));

vexatRTCurves.f2.lceNAT   = zeros(size(lceN));
vexatRTCurves.f2.fceNAT   = zeros(size(lceN));

vexatRTCurves.fecm.lceNAT = zeros(size(lceN));
vexatRTCurves.fecm.fceNAT = zeros(size(lceN));

vexatRTCurves.fpeActiveTitin.lceNAT = zeros(size(lceN));
vexatRTCurves.fpeActiveTitin.fceNAT = zeros(size(lceN));

lceNAT = zeros(size(lceN));

l1NFixed=0;

for i=1:1:npts
    fibKin = calcFixedWidthPennatedFiberKinematicsAlongTendon(...
                    lceN(i,1)*umat43RT.lceOpt, ...
                    0, ...
                    umat43RT.lceOpt,...
                    umat43RT.penOpt);

    lceAT = fibKin.fiberLengthAlongTendon;
    lceNAT(i,1) = lceAT / umat43RT.lceOpt;
    alpha = fibKin.pennationAngle;

    useElasticTendon=0;
    activation=1;
    modelState = calcVEXATIsometricState(...
                        activation,...
                        lceAT,...
                        lceAT,...
                        umat43RT,...
                        umat43SarcomereParams,...
                        umat43QuadraticCurves,...
                        umat43QuadraticTitinCurves,...
                        useElasticTendon);      

% 
%     flN = calcQuadraticBezierYFcnXDerivative(lceN(i,1),...
%             umat43QuadraticCurves.activeForceLengthCurve,0);
%     
%     tol=1e-6;
%     iterMax=100;
%     eqSoln = calcVEXATTitinPassiveEquilibrium(lceN(i,1), ...
%                     umat43RT.shiftPEE, ...
%                     umat43RT.scalePEE,...
%                     umat43SarcomereParams, ...
%                     umat43QuadraticCurves, ...
%                     umat43QuadraticTitinCurves,...
%                     tol,iterMax);
%     
%     assert(eqSoln.err < tol,['Error: Failed to meet tolerance',...
%                              ' when solving for titin lengths']);

%    lceNAT(i,1) = lceAT / umat43RT.lceOpt;

    flN = modelState.falN;
    f1N = modelState.f1N;
    f2N = modelState.f2N;
    fecmN=modelState.fecmN;

    cosAlpha = cos(alpha); %Silly for a matlab script, but waste not ...
    vexatRTCurves.fl.lceNAT(i,1)=lceNAT(i,1);
    vexatRTCurves.fl.fceNAT(i,1)=flN*cosAlpha;

    vexatRTCurves.f1.lceNAT(i,1)=lceNAT(i,1);
    vexatRTCurves.f1.fceNAT(i,1)=f1N*cosAlpha;

    vexatRTCurves.f2.lceNAT(i,1)=lceNAT(i,1);
    vexatRTCurves.f2.fceNAT(i,1)=f2N*cosAlpha;

    vexatRTCurves.fecm.lceNAT(i,1)=lceNAT(i,1);
    vexatRTCurves.fecm.fceNAT(i,1)=fecmN*cosAlpha;

    vexatRTCurves.fpe.lceNAT(i,1)=lceNAT(i,1);
    vexatRTCurves.fpe.fceNAT(i,1)=(fecmN+f2N)*cosAlpha;

    %Evaluate active titin forces
    
    if(lceN(i,1) <= umat43RT.lceHNLb1A*2)
        l1NFixed = modelState.l1N;
        vexatRTCurves.fpeActiveTitin.lceNAT(i,1) = lceNAT(i,1);
        vexatRTCurves.fpeActiveTitin.fceNAT(i,1) = vexatRTCurves.fpe.fceNAT(i,1);
    else
        activeTitinSoln = calcVEXATTitinForces(...
                                lceN(i,1), l1NFixed,...
                                umat43RT.shiftPEE, ...
                                umat43RT.scalePEE, ...
                                umat43SarcomereParams, ...
                                umat43QuadraticCurves, ...
                                umat43QuadraticTitinCurves);

        vexatRTCurves.fpeActiveTitin.lceNAT(i,1) = lceNAT(i,1);

        fpeNActive = (activeTitinSoln.f2N ...
                    + activeTitinSoln.fecmN)*cosAlpha;

        vexatRTCurves.fpeActiveTitin.fceNAT(i,1) = fpeNActive;

    end

end

vexatRTCurves.fpe.kceNAT = calcCentralDifferenceDataSeries(...
                            vexatRTCurves.fpe.lceNAT,...
                            vexatRTCurves.fpe.fceNAT);

%%
% Set keyPointsVEXATRTFpe
%%
idxMin=find(vexatRTCurves.fpe.fceNAT>0.01,1,'first');
keyPointsVEXATRTFpe.lceNAT = interp1(vexatRTCurves.fpe.fceNAT(idxMin:end,1),...
                                     vexatRTCurves.fpe.lceNAT(idxMin:end,1),...
                                     1);
keyPointsVEXATRTFpe.fceNAT = 1;
keyPointsVEXATRTFpe.kceNAT = interp1(vexatRTCurves.fpe.lceNAT,... 
                                   vexatRTCurves.fpe.kceNAT,...
                                   keyPointsVEXATRTFpe.lceNAT);


%%
% If requested, plot the curves and the experimental data
%%
if(flag_plotVEXATActivePassiveForceLengthFitting==1)
    figActivePassiveForceLength=figure;

        plot(vexatRTCurves.fl.lceNAT,...
             vexatRTCurves.fl.fceNAT,'-',...
             'Color',[1,1,1].*0.25,...
             'DisplayName','fl');
        hold on;
        plot(vexatRTCurves.fpe.lceNAT,...
             vexatRTCurves.fpe.fceNAT,...
             '-','Color',[1,1,1].*0.5,...
             'DisplayName','fpe');
        hold on;        
        plot(vexatRTCurves.fl.lceNAT,...
             vexatRTCurves.fl.fceNAT+vexatRTCurves.fpe.fceNAT,...
             '-','Color',[1,1,1].*0,...
             'DisplayName','fl+fpe');
        hold on;        

        expLceScalingHL1997 = keyPointsHL1997.lceOptAT/umat43RT.lceOptAT;
        expFceScalingHL1997 = 1;%keyPointsHL1997.fceOptAT/umat43RT.fceOptAT;

        expLceScalingHL2002 = keyPointsHL2002.lceOptAT/umat43RT.lceOptAT;
        expFceScalingHL2002 = 1;%keyPointsHL2002.fceOptAT/umat43RT.fceOptAT;
        
        expLceATHL1997_fpe = ...
            (keyPointsHL1997.lp0_active_lceNAT*umat43RT.lceOptAT ...
                       + keyPointsHL1997.fpe.l)./umat43RT.lceOptAT;
        expLceATHL1997_fl = ...
            (keyPointsHL1997.lp0_active_lceNAT*umat43RT.lceOptAT ...
                       + keyPointsHL1997.fl.l)./umat43RT.lceOptAT;

        expLceATHL2002_fpe = ...
            (keyPointsHL2002.lp0_active_lceNAT*umat43RT.lceOptAT ...
                       + keyPointsHL2002.fpe.l)./umat43RT.lceOptAT;
        expLceATHL2002_fl = ...
            (keyPointsHL2002.lp0_active_lceNAT*umat43RT.lceOptAT ...
                       + keyPointsHL2002.fl.l)./umat43RT.lceOptAT;

        plot(expLceATHL1997_fl,...
             keyPointsHL1997.fl.fceNAT.*expFceScalingHL1997,'xr',...
             'DisplayName','HL1997 fl');
        hold on;
        plot(expLceATHL1997_fpe,...
             keyPointsHL1997.fpe.fceNAT.*expFceScalingHL1997,'or',...
             'DisplayName','HL1997 fpe');
        hold on;
        
        plot(expLceATHL2002_fl,...
             keyPointsHL2002.fl.fceNAT.*expFceScalingHL2002,'xb',...
             'DisplayName','HL2002 fl');
        hold on;

        plot(expLceATHL2002_fpe,...
             keyPointsHL2002.fpe.fceNAT.*expFceScalingHL2002,'ob',...
             'DisplayName','HL2002 fpe');
        hold on;   

        plot(keyPointsVEXATRTFpe.lceNAT,...
             keyPointsVEXATRTFpe.fceNAT,'.m',...
             'HandleVisibility','off');
        hold on;
        text(keyPointsVEXATRTFpe.lceNAT,...
            keyPointsVEXATRTFpe.fceNAT,...
             sprintf('%1.2f %s',keyPointsVEXATRTFpe.kceNAT,'$$f^M_o/\ell^M_o$$'),...
             'HorizontalAlignment','left',...
             'VerticalAlignment','top',...
             'FontSize',8);
        hold on;
        text(0.45,1.15,...
             sprintf('%1.2e RMSE fl\n%1.2e RMSE fpe\n',...
                        vexatRTCurves.fl.rmse,...
                        vexatRTCurves.fpe.rmse),...
             'HorizontalAlignment','left',...
             'VerticalAlignment','top',...
             'FontSize',8)
        hold on;
        switch expData
            case 'HL1997'
                text(0.75,0.8,...
                    sprintf('%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n',...
                    umat43RT.fceOpt,'$$f^M_o$$',umat43RT.lceOpt,'$$\ell^M_o$$',...
                    umat43RT.ltSlk,'$$\ell^T_s$$',umat43RT.lp0HL1997,'$$\ell^P_0$$',...
                    umat43RT.shiftPEE,'$$\Delta^{PEE}$$',umat43RT.scalePEE,'$$s^{PEE}$$'),...
                    'FontSize',12,...
                    'VerticalAlignment','top');
                hold on;

            case 'HL2002'
                text(0.75,0.8,...
                    sprintf('%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n%1.3f %s\n',...
                    umat43RT.fceOpt,'$$f^M_o$$',umat43RT.lceOpt,'$$\ell^M_o$$',...
                    umat43RT.ltSlk,'$$\ell^T_s$$',umat43RT.lp0HL2002,'$$\ell^P_0$$',...
                    umat43RT.shiftPEE,'$$\Delta^{PEE}$$',umat43RT.scalePEE,'$$s^{PEE}$$'),...
                    'FontSize',12,...
                    'VerticalAlignment','top');
                hold on;
        end
        box off;
        xlabel('Norm. Length ($$\ell/\ell^M_o$$)');
        ylabel('Norm. Force ($$f/f^M_o$$)');
        xlim([0.4,1.6]);
        ylim([0,1.2]);
        here=1;
end
