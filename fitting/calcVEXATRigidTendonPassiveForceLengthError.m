function errVec = calcVEXATRigidTendonPassiveForceLengthError(x,...
                scaleSoln,...               
                umat43RT,...
                umat43SarcomereParams,...
                umat43QuadraticCurves,...
                umat43QuadraticTitinCurves,...
                expActiveIsometricPts,...
                expPassiveIsometricPts,...
                pathLengthReference,...
                flag_fittingHL1997)


lp0    = pathLengthReference;

if(flag_fittingHL1997 == 0)
    shiftPEE = x(1,1)*scaleSoln.shiftPEE;
    scalePEE = x(2,1)*scaleSoln.scalePEE;
else
    shiftPEE = x(1,1)*scaleSoln.shiftPEE;
    scalePEE = umat43RT.scalePEE;    
end

errVec = zeros(length(expActiveIsometricPts.l)...
              +length(expPassiveIsometricPts.l), 1);
idx=1;

%A reduced set of parameters to evaluate the isometric equilbrium of 
%the model
umat43RTFitting=umat43RT;

umat43RTFitting.scalePEE=scalePEE;
umat43RTFitting.shiftPEE=shiftPEE;
umat43RTFitting.ltSlk=0;


%For every passive point and active point evaluate the isometric
%equilibrium at each path length and evaluate the difference in force
%between the experimental data and the model
if(isempty(length(expPassiveIsometricPts.l))==0)
    for i=1:1:length(expPassiveIsometricPts.l)
        activation=0;
        pathLength = expPassiveIsometricPts.lceNAT(i)*umat43RTFitting.lceOpt;

        useElasticTendon=0;
        modelState = calcVEXATIsometricState(...
                            activation,...
                            pathLength,...
                            pathLength,...
                            umat43RTFitting,...
                            umat43SarcomereParams,...
                            umat43QuadraticCurves,...
                            umat43QuadraticTitinCurves,...
                            useElasticTendon);          

        errVec(idx,1) = modelState.fceNAT...
                      - expPassiveIsometricPts.fceNAT(i); 
        idx=idx+1;
    end
end

if(isempty(length(expActiveIsometricPts.l))==0)
    for i=1:1:length(expActiveIsometricPts.l)
        activation=1;
        pathLength = expActiveIsometricPts.lceNAT(i)*umat43RTFitting.lceOpt;

        useElasticTendon=0;
        modelState = calcVEXATIsometricState(...
                            activation,...
                            pathLength,...
                            pathLength,...
                            umat43RTFitting,...
                            umat43SarcomereParams,...
                            umat43QuadraticCurves,...
                            umat43QuadraticTitinCurves,...
                            useElasticTendon);          

        errVec(idx,1) = modelState.fceNAT ...
                      - expActiveIsometricPts.fceNAT(i); 
        idx=idx+1;        
    end
end

here=1;
