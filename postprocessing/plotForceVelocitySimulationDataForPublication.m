function [figH] = ...
    plotForceVelocitySimulationDataForPublication(figH,...
                      lsdynaBinout,lsdynaMuscleUniform,d3hspFileName, ...
                      indexModel,subPlotLayout,subPlotRows,subPlotColumns,...                      
                      simulationFile,indexSimulation, totalSimulations,... 
                      referenceDataFolder,...                       
                      referenceCurveFolder,...
                      muscleArchitecture,...
                      flag_addReferenceData,...
                      flag_addSimulationData,...
                      lineColorA, lineColorB, ...
                      referenceColorA, referenceColorB)

figure(figH);

fontSizeLegend=6;


trialFolder=pwd;
cd ..;
simulationFolder=pwd;
cd(trialFolder);

indexRow = indexModel;
scaleF=1000;

optimalFiberLength      =muscleArchitecture.lceOpt;
maximumIsometricForce   =muscleArchitecture.fiso;
tendonSlackLength       =muscleArchitecture.ltslk;
pennationAngle          =muscleArchitecture.alpha;

lineWidthData=1;
lineWidthModel=1;

fileNameShorteningStart     = 'force_velocity_00';
fileNameShorteningEnd       = 'force_velocity_05';
fileNameLengtheningStart    = 'force_velocity_06';
fileNameLengtheningEnd      = 'force_velocity_11';

fileNameMaxActStart         = 'force_velocity_00';
fileNameMaxActLast          = 'force_velocity_11';
fileNameSubMaxActStart      = 'force_velocity_12';
fileNameSubMaxActLast       = 'force_velocity_17';

numberSubMaxActStart=12;

fileNameIsometric           = 'isometric';


flag_viva=0;
if(contains(lsdynaMuscleUniform.nameLabel,'VIVA+'))
    flag_viva=1;
end

plotSettings(3) = struct('yLim',[],'xLim',[],'yTicks',[],'xTicks',[]);

timeEnd     = lsdynaMuscleUniform.eloutTime(end,1);
timeStart   = lsdynaMuscleUniform.eloutTime(1,1);
timeEpsilon = (timeEnd-timeStart)/1000;
timeDelta   = (timeEnd-timeStart)/100;

timeRamp0   = getParameterValueFromD3HSPFile(d3hspFileName, 'TIMERAMP0');
timeRamp1   = getParameterValueFromD3HSPFile(d3hspFileName, 'TIMERAMP1');
pathLen0    = getParameterValueFromD3HSPFile(d3hspFileName, 'pathLen0');
pathLen1    = getParameterValueFromD3HSPFile(d3hspFileName, 'pathLen1');

pathVel         = getParameterValueFromD3HSPFile(d3hspFileName, 'PATHVEL');
timeExcitation1 = getParameterValueFromD3HSPFile(d3hspFileName, 'TIMES1');

indexRamp0  = find(uniformModelData.time>=timeRamp0,1);
indexRamp1  = find(uniformModelData.time<=timeRamp1,1);

timeSample  = timeRamp1;
indexSample = indexRamp1;

idx=1;
plotSettings(idx).xLim  = [-1.01,1.01];
plotSettings(idx).yLim  = [0,1.501];
plotSettings(idx).xTicks = [-1,0,1];
plotSettings(idx).yTicks = [0,1];

idx=2;
plotSettings(idx).xLim   = [0,timeEnd];
plotSettings(idx).yLim   = plotSettings(1).yLim;
plotSettings(idx).xTicks = round([0,timeExcitation1,timeRamp0,timeRamp1],3,'significant');
plotSettings(idx).yTicks = [0,1];

lineType = '-';

lastTwoChar = simulationFile(1,end-1:1:end);
lastTwoNum  = str2num(lastTwoChar);
if(isempty(lastTwoNum) == 0)
    if(lastTwoNum >= numberSubMaxActStart)
        lineType='--';
    end
end

%Load the isometric binout file
currDir = pwd;
cd(fullfile('..','isometric'));
[binoutIsometric,status] = binoutreader('dynaOutputFile','binout0000','ignoreUnknownDataError',true);
cd(currDir);



% Add the reference data
%if(flag_addReferenceData==1)


%end

% Add the simulation data
if(flag_addSimulationData==1)  
    
    flag_activeData=0;
    flag_passiveData=0;
    if(contains(simulationFile,'active_force_length'))        
        flag_activeData=1;
    end
    if(contains(simulationFile,'passive_force_length'))
        flag_passiveData=1;
    end

    lineColor = lineColorA;    
    markerFaceColor = lineColorA;
    markerLineWidth = lineWidthModel;
    markerSize = 4;
    if(abs(lsdynaMuscleUniform.exc(end,1)-1) > 1e-3)
        markerFaceColor = [1,1,1];
        markerSize=4;
        markerLineWidth = lineWidthModel;        
    end



    if(flag_activeData)
        subplot('Position',reshape(subPlotLayout(indexRow,2,:),1,4));

        fAN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexA,1);
        fA  = fAN.*maximumIsometricForce.*scaleF;
        fBN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexB,1);
        fB  = fBN.*maximumIsometricForce.*scaleF;

        act = lsdynaMuscleUniform.act(indexB,1);

        fpeAT =(fA);
        faeAT =(fB-fA);

        lp1 = lsdynaMuscleUniform.lp(indexB,1);
        ltN = lsdynaMuscleUniform.ltN(indexB,1);
        
        lp     = lp1;
        displayNameStr ='';
        handleVisibility='off';

        fpeN  = fAN;
        faeN  = (fBN-fAN);
        lceN  = lsdynaMuscleUniform.lceN(indexB,1);


%         if(contains(lsdynaMuscleUniform.nameLabel,'EHTMM'))
%             displayNameStr=[lsdynaMuscleUniform.nameLabel,...
%                   sprintf('(%1.1f)',lsdynaMuscleUniform.act(end,1))];
%             
%         else
%             displayNameStr=[lsdynaMuscleUniform.nameLabel,...
%                   sprintf('(%1.1f)',lsdynaMuscleUniform.act(end,1))];
%             
%         end



        entryHeadings = {'act','lp','fae','lceN','fceN'};
        entryData = [act,lp,faeAT];

        %Start a new file
        if(contains(simulationFile,fileNameShorteningStart))
            fid=fopen([simulationFolder,filesep,'record.csv'],'w');
            fprintf(fid,'%1.3e,%1.3e,%1.3e,%1.3e,%1.3e\n',act,lp,faeAT,lceN,faeN);
            fclose(fid);
        elseif(contains(simulationFile,fileNameMaxActLast))
            fid=fopen([simulationFolder,filesep,'record.csv'],'a');
            fprintf(fid,'%1.3e,%1.3e,%1.3e,%1.3e,%1.3e\n',act,lp,faeAT,lceN,faeN);
            fclose(fid);
            dataMax = csvread([simulationFolder,filesep,'record.csv']);

            displayNameStr = [lsdynaMuscleUniform.nameLabel,...
                   sprintf('(%1.1f)',dataMax(1,1))];            

            idxX = 2;
            idxY = 3;
            if(flag_plotInNormalizedCoordinates==1)
                idxX = 4;
                idxY = 5;
            end

            plot(dataMax(:,idxX),dataMax(:,idxY),...
                 '-',...
                'Color',[1,1,1],...
                'LineWidth',lineWidthModel+2,...
                'DisplayName',displayNameStr,...
                'HandleVisibility','off');
            hold on;
            plot(dataMax(:,idxX),dataMax(:,idxY),...
                 lineType,...
                'Color',lineColor,...
                'LineWidth',lineWidthModel,...
                'DisplayName',displayNameStr,...
                'HandleVisibility','on',...
                'MarkerFaceColor',markerFaceColor,...
                'MarkerSize',markerSize);
            hold on;
            
            for idxPoint=1:1:size(dataMax,1)
                plot(dataMax(idxPoint,idxX),dataMax(idxPoint,idxY),...
                     lsdynaMuscleUniform.mark,...
                    'Color',[1,1,1],...
                    'LineWidth',markerLineWidth,...
                    'DisplayName',displayNameStr,...
                    'HandleVisibility','off',...
                    'MarkerFaceColor',[1,1,1],...
                    'MarkerSize',markerSize+2);
                hold on;
        
                plot(dataMax(idxPoint,idxX),dataMax(idxPoint,idxY),...
                     lsdynaMuscleUniform.mark,...
                    'Color',lineColor,...
                    'LineWidth',markerLineWidth,...
                    'DisplayName',displayNameStr,...
                    'HandleVisibility','off',...
                    'MarkerFaceColor',markerFaceColor,...
                    'MarkerSize',markerSize);
                hold on;
            end

            [valMax,idxMax] = max(dataMax(:,3));

            idx=2;
            xDelta=abs(diff(plotSettings(idx).xLim))*0.05;
            yDelta=abs(diff(plotSettings(idx).yLim))*0.05;
            xText = min(plotSettings(idx).xLim)+0.5*xDelta;

            text(xText,max(dataMax(:,idxY))-yDelta*0.5,...
                 sprintf('%s: %1.0f mm\n%s: %1.1f N',...
                 '$$\ell^{*}$$',dataMax(idxMax,2),...
                 '$$f^{*}$$',dataMax(idxMax,3)),...
                 'HorizontalAlignment','left',...
                 'VerticalAlignment','top',...
                 'FontSize',6);
            hold on;


            plot([xText,dataMax(idxMax,idxX)],...
                 [1,1].*dataMax(idxMax,idxY),...
                 '-',...
                'Color',[1,1,1],...
                'LineWidth',0.5+2,...
                'DisplayName','',...
                'HandleVisibility','off');
            hold on;            
            plot([xText,dataMax(idxMax,idxX)],...
                 [1,1].*dataMax(idxMax,idxY),...
                 '-',...
                'Color',[0,0,0],...
                'LineWidth',0.5,...
                'DisplayName','',...
                'HandleVisibility','off');
            hold on;

            xText = max(plotSettings(idx).xLim)-5*xDelta;

            text(xText,...
                 1,...
                 sprintf('Properties\n%s: %1.0f mm\n%s: %1.0f mm\n%s: %1.1f N',...
                 '$$\ell^{M}_o$$',optimalFiberLength,...
                 '$$\ell^{T}_s$$',tendonSlackLength,...
                 '$$f^{M}_o$$',maximumIsometricForce*scaleF),...
                 'HorizontalAlignment','left',...
                 'VerticalAlignment','top',...
                 'FontSize',6);
            hold on;

        elseif(contains(simulationFile,fileNameSubMaxActStart))
            fid=fopen([simulationFolder,filesep,'record.csv'],'w');
            fprintf(fid,'%1.3e,%1.3e,%1.3e,%1.3e,%1.3e\n',act,lp,faeAT,lceN,faeN);
            fclose(fid);
        elseif(contains(simulationFile,fileNameSubMaxActLast))
            fid=fopen([simulationFolder,filesep,'record.csv'],'a');
            fprintf(fid,'%1.3e,%1.3e,%1.3e,%1.3e,%1.3e\n',act,lp,faeAT,lceN,faeN);
            fclose(fid);
            dataMax = csvread([simulationFolder,filesep,'record.csv']); 

            idxX = 2;
            idxY = 3;
            if(flag_plotInNormalizedCoordinates==1)
                idxX = 4;
                idxY = 5;
            end

            displayNameStr = [lsdynaMuscleUniform.nameLabel,...
                   sprintf('(%1.1f)',dataMax(1,1))];            
            plot(dataMax(:,idxX),dataMax(:,idxY),...
                 '-',...
                'Color',[1,1,1],...
                'LineWidth',lineWidthModel+2,...
                'DisplayName',displayNameStr,...
                'HandleVisibility','off');
            hold on;
            plot(dataMax(:,idxX),dataMax(:,idxY),...
                 lineType,...
                'Color',lineColor,...
                'LineWidth',lineWidthModel,...
                'DisplayName',displayNameStr,...
                'HandleVisibility','on',...
                'MarkerFaceColor',markerFaceColor,...
                'MarkerSize',markerSize);
            hold on;

            for idxPoint=1:1:size(dataMax,1)
                plot(dataMax(idxPoint,idxX),dataMax(idxPoint,idxY),...
                     lsdynaMuscleUniform.mark,...
                    'Color',[1,1,1],...
                    'LineWidth',markerLineWidth,...
                    'DisplayName',displayNameStr,...
                    'HandleVisibility','off',...
                    'MarkerFaceColor',[1,1,1],...
                    'MarkerSize',markerSize+2);
                hold on;
        
                plot(dataMax(idxPoint,idxX),dataMax(idxPoint,idxY),...
                     lsdynaMuscleUniform.mark,...
                    'Color',lineColor,...
                    'LineWidth',markerLineWidth,...
                    'DisplayName',displayNameStr,...
                    'HandleVisibility','off',...
                    'MarkerFaceColor',markerFaceColor,...
                    'MarkerSize',markerSize);
                hold on;
            end

            lgdH = legend('Location','NorthWest');
            lgdH.FontSize=fontSizeLegend;
            legend box off;
         
            [valMax,idxMax] = max(dataMax(:,idxY));
            xyMax = [dataMax(idxMax,idxX),dataMax(idxMax,idxY)];            
            
            idx=2;
            xDelta=abs(diff(plotSettings(idx).xLim))*0.05;
            yDelta=abs(diff(plotSettings(idx).yLim))*0.05;
            xText = min(plotSettings(idx).xLim)+0.5*xDelta;
            

%             text(xText,max(dataMax(:,idxY))-yDelta*0.5,...
%                  sprintf('%s: %1.0f mm\n%s: %1.1f N',...                 
%                  '$$\ell^{+}$$',dataMax(idxMax,2),...
%                  '$$f^{+}$$',dataMax(idxMax,3)),...
%                  'HorizontalAlignment','left',...
%                  'VerticalAlignment','top',...
%                  'FontSize',6);
%             hold on;
%             
%             plot([xText,dataMax(idxMax,idxX)],...
%                  [1,1].*dataMax(idxMax,idxY),...
%                  '-',...
%                 'Color',[1,1,1],...
%                 'LineWidth',0.5+2,...
%                 'DisplayName','',...
%                 'HandleVisibility','off');
%             hold on;
% 
%             plot([xText,dataMax(idxMax,idxX)],...
%                  [1,1].*dataMax(idxMax,idxY),...
%                  '-',...
%                 'Color',[0,0,0],...
%                 'LineWidth',0.5,...
%                 'DisplayName','',...
%                 'HandleVisibility','off');
%             hold on;
        
            %%
            %Plot Holt Azizi 2014
            %%
            dataHA2014 = loadDigitizedData(fileHA2014,...
                            'Norm. Force ($$f/f^M_o$$)','Norm. Length ($$\ell/\ell^M_o$$)',...
                            {'s00','s01','s03','s04'},...
                            {'Holt and Azizi 2014'});
            if(flag_plotInNormalizedCoordinates==0)
                for idx=1:1:length(dataHA2014)
                    dataHA2014(idx).x(:,1)=dataHA2014(idx).x(:,1).*(maximumIsometricForce*scaleF);
                    dataHA2014(idx).y(:,1)=dataHA2014(idx).y(:,1).*(optimalFiberLength)+tendonSlackLength;                    
                end
            end        
            flag_addReferenceData=0;
        
            angleV = ([0:0.05:1].*(2*pi))';
        
            subplot('Position',reshape(subPlotLayout(indexRow,2,:),1,4));
            flag_firstRound=1;
            expColor=[0,0,0];%[150,0,24]./256;%[159, 129, 112]./256;
            idx=3;
            %for idx=1:1:3
                xy0 = [dataHA2014(idx).y(1,:),dataHA2014(idx).x(1,:)];
                xy1 = [dataHA2014(idx).y(2,:),dataHA2014(idx).x(2,:)];
                xy2 = [dataHA2014(idx).y(3,:),dataHA2014(idx).x(3,:)];
                xy3 = [dataHA2014(idx).y(4,:),dataHA2014(idx).x(4,:)];
                xy4 = [dataHA2014(idx).y(5,:),dataHA2014(idx).x(5,:)];

                
        
                rx = abs(xy3(1,1)-xy2(1,1))*0.5;
                ry = abs(xy1(1,2)-xy0(1,2))*0.5;
                dataEllipse = [rx.*cos(angleV), ry.*sin(angleV)];
                dataEllipse = dataEllipse + xy4;
        
                fill(dataEllipse(:,1),dataEllipse(:,2),...
                     [1,1,1], ...
                     'EdgeColor',expColor,...
                     'HandleVisibility','off');
                hold on;
        
                hvis = 'on';
                 if(flag_firstRound==1)
                     hvis='on';
                     flag_firstRound=0;
                 end
        %         plot([xy0(1,1),xy1(1,1)],...
        %              [xy0(1,2),xy1(1,2)],...
        %              '-',...
        %              'LineWidth',1.5,...
        %              'Color',[1,1,1],...
        %              'MarkerFaceColor',[1,1,1],...
        %              'MarkerSize',4,...
        %              'DisplayName',labelHA2014,...
        %              'HandleVisibility','off');
        %         hold on;
        % 
        %         plot([xy2(1,1),xy3(1,1)],...
        %              [xy2(1,2),xy3(1,2)],...
        %              '-',...
        %              'LineWidth',1.5,...
        %              'Color',[1,1,1],...
        %              'MarkerFaceColor',[1,1,1],...
        %              'MarkerSize',4,...
        %              'DisplayName',labelHA2014,...
        %              'HandleVisibility','off');
        %         hold on;
        
                plot([xy0(1,1),xy1(1,1)],...
                     [xy0(1,2),xy1(1,2)],...
                     '-',...
                     'LineWidth',1,...
                     'Color',expColor,...
                     'MarkerFaceColor',[1,1,1],...
                     'MarkerSize',4,...
                     'DisplayName',labelHA2014,...
                     'HandleVisibility','off');
                hold on;
        
                plot([xy2(1,1),xy3(1,1)],...
                     [xy2(1,2),xy3(1,2)],...
                     '-',...
                     'LineWidth',1,...
                     'Color',expColor,...
                     'MarkerFaceColor',[1,1,1],...
                     'MarkerSize',4,...
                     'DisplayName',labelHA2014,...
                     'HandleVisibility','off');
                hold on;

                plot(xy4(1,1),...
                     xy4(1,2),...
                     's',...
                     'LineWidth',1,...
                     'Color',expColor,...
                     'MarkerFaceColor',[1,1,1],...
                     'MarkerSize',4,...
                     'DisplayName',labelHA2014,...
                     'HandleVisibility',hvis);
                hold on;
                
            %end
            %%
            %Add annotation
            %%
            yB=0.25;            
            dyB = 0.025;
            dxB = 0.025;

            if(flag_plotInNormalizedCoordinates==0)
                yB = maximumIsometricForce*scaleF*0.25;
                dxB = optimalFiberLength*0.025;
                dyB = maximumIsometricForce*scaleF*0.025;
            end
            plot([xy4(1,1),xy4(1,1)],...
                 [xy4(1,2)-ry,yB],...
                 '-',...
                 'Color',[1,1,1],...
                 'LineWidth',2,...
                 'HandleVisibility','off');
            hold on;
            plot([xy4(1,1),xy4(1,1)],...
                 [xy4(1,2)-ry,yB],...
                 '-',...
                 'Color',[0,0,0],...
                 'LineWidth',yB,...
                 'HandleVisibility','off');
            hold on;            
            plot([xyMax(1,1),xyMax(1,1)],...
                 [xyMax(1,2),yB],...
                 '-',...
                 'Color',[1,1,1],...
                 'LineWidth',2,...
                 'HandleVisibility','off');
            hold on;            
            plot([xyMax(1,1),xyMax(1,1)],...
                 [xyMax(1,2),yB],...
                 '-',...
                 'Color',[0,0,0],...
                 'LineWidth',0.5,...
                 'HandleVisibility','off');   
            hold on;
            plot([xy4(1,1),xyMax(1,1)],...
                 [yB,yB],...
                 '-',...
                 'Color',[0,0,0],...
                 'LineWidth',0.5,...
                 'HandleVisibility','off');   
            hold on;
            plot([xy4(1,1)-dxB],...
                 [yB],...
                 '>',...
                 'Color',[0,0,0],...
                 'LineWidth',0.5,...
                 'MarkerSize',2,...
                 'MarkerFaceColor',[0,0,0],...
                 'HandleVisibility','off');   
            hold on;
            plot([xyMax(1,1)+dxB],...
                 [yB],...
                 '<',...
                 'Color',[0,0,0],...
                 'LineWidth',0.5,...
                 'MarkerSize',2,...
                 'MarkerFaceColor',[0,0,0],...
                 'HandleVisibility','off');   
            hold on;     
            if(flag_plotInNormalizedCoordinates==1)
                text((xy4(1,1)+xyMax(1,1))*0.5,...
                      yB-dyB,...
                      sprintf('%1.2f%s',xy4(1,1)-xyMax(1,1),'$$\ell^M_o$$'),...
                      'FontSize',6,...
                      'HorizontalAlignment','center',...
                      'VerticalAlignment','top');
                hold on;
            else 
                text((xy4(1,1)+xyMax(1,1))*0.5,...
                      yB-dyB,...
                      sprintf('%1.2fmm',xy4(1,1)-xyMax(1,1)),...
                      'FontSize',6,...
                      'HorizontalAlignment','center',...
                      'VerticalAlignment','top');
                hold on;
            end


            
        else
            fid=fopen([simulationFolder,filesep,'record.csv'],'a');
            fprintf(fid,'%1.3e,%1.3e,%1.3e,%1.3e,%1.3e\n',act,lp,faeAT,lceN,faeN);
            fclose(fid);
        end

%         if(contains(simulationFile,fileNameMaxActOpt))
%             text(lp,faeAT,...
%                  sprintf('*%1.1f',lsdynaMuscleUniform.act(indexB,1)),...
%                  'Color',lineColor,...
%                  'HorizontalAlignment','center',...
%                  'VerticalAlignment','bottom');           
%             hold on;
%         end
%         if(contains(simulationFile,fileNameSubMaxActOpt))
%             text(lp,faeAT,...
%                  sprintf('+%1.1f',lsdynaMuscleUniform.act(indexB,1)),...
%                  'Color',lineColor,...
%                  'HorizontalAlignment','center',...
%                  'VerticalAlignment','bottom');           
%             hold on;
%         end
        box off;    
        idx=2;
        xlim(plotSettings(idx).xLim);
        ylim(plotSettings(idx).yLim);
        xticks(plotSettings(idx).xTicks);
        yticks(plotSettings(idx).yTicks); 
    
        if(flag_plotInNormalizedCoordinates==1)
            xlabel('Norm. Length ($$\ell/\ell^{M}_o$$)');
            ylabel('Norm. Force ($$f/f^{M}_o$$)');   
        else
            xlabel('Path Length (mm)');
            ylabel('Tendon Force (N)');   
        end
        title('B. Active force-length relations',...
              'HorizontalAlignment','right');        
    end

    if(flag_passiveData)

        subplot('Position',reshape(subPlotLayout(indexRow,1,:),1,4));
        

        %if(contains(simulationFile,'passive_force_length'))
        %    displayNameStr=[lsdynaMuscleUniform.nameLabel,' $$\tilde{f}^{PE} \cos \alpha$$'];
        %end

        idxA = 1;
        if(length(lsdynaMuscleUniform.eloutAxialBeamForceNorm) ...
                > length(lsdynaMuscleUniform.lceATN))
            idxA=2;
        end

        if(flag_plotInNormalizedCoordinates==1)
            lengthPlot = lsdynaMuscleUniform.lceN;
            forcePlot  = lsdynaMuscleUniform.eloutAxialBeamForceNorm(idxA:end,1);
        else
            lengthPlot  = lsdynaMuscleUniform.lp;
            forcePlot   = lsdynaMuscleUniform.eloutAxialBeamForceNorm(idxA:end,1).*maximumIsometricForce.*scaleF;
        end

        displayNameStr=lsdynaMuscleUniform.nameLabel;


        plot(lengthPlot,...
             forcePlot,...
             '-',...
            'Color',[1,1,1],...
            'LineWidth',lineWidthModel+2,...
            'DisplayName',displayNameStr,...
            'HandleVisibility','off');
        hold on;        
        plot(lengthPlot,...
             forcePlot,...
             '-',...
            'Color',lineColor,...
            'LineWidth',lineWidthModel,...
            'DisplayName',displayNameStr,...
            'HandleVisibility','on');
        hold on;
        

        if(flag_plotInNormalizedCoordinates==1)
            fpeN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(idxA:end,1);
            lceN = lsdynaMuscleUniform.lceN;
            fpeMin = 0.01;
            fpeIso = 1;            
        else
            fpeN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(idxA:end,1).*maximumIsometricForce.*scaleF;
            lceN = lsdynaMuscleUniform.lp;            
            fpeMin = 0.01*maximumIsometricForce*scaleF;
            fpeIso = maximumIsometricForce*scaleF;
        end
        fpeMinNewton = 0.001*maximumIsometricForce*scaleF;
        fpeIsoNewton = 1*maximumIsometricForce*scaleF;
        

        fpeMax = max(fpeN);
        [idxValid] = find(fpeN >= fpeMin);
        idxMin = min(idxValid)-1;

        while(fpeN(idxMin,1) > fpeMin*0.5 && idxMin > 1)
            idxMin=idxMin-1;
        end    
        idxMin=idxMin-1;
        
        lp0 = lceN(idxMin,1);
        fp0 = fpeN(idxMin,1); 

        lp1 = interp1(fpeN(idxValid,:), ...
                      lceN(idxValid,:), fpeIso);

        lp0MM       = lsdynaMuscleUniform.lp(idxMin,1);
        fp0Newton   = lsdynaMuscleUniform.eloutAxialBeamForceNorm(idxA+idxMin,1);                    
        fp0Newton   = fp0Newton*maximumIsometricForce*scaleF;

        lp1MM       = interp1(lsdynaMuscleUniform.eloutAxialBeamForceNorm((idxValid)+(idxA-1),1).*maximumIsometricForce.*scaleF, ...
                              lsdynaMuscleUniform.lp(idxValid,:), ...
                              fpeIsoNewton);
        fp1Newton   = fpeIsoNewton; 


        dfdl = calcCentralDifferenceDataSeries(...
                 lsdynaMuscleUniform.lp(idxValid,:),...
                 lsdynaMuscleUniform.eloutAxialBeamForceNorm((idxValid)+(idxA-1),1).*maximumIsometricForce.*scaleF);
        dfdl1 = interp1(lceN(idxValid,:),...
                        dfdl,lp1);


        idx=1;
        lpLeft= min(plotSettings(idx).xLim);

        xDelta=abs(diff(plotSettings(idx).xLim))*0.05;
        yDelta=abs(diff(plotSettings(idx).yLim))*0.05;

        plot(lp0,fp0,...
             lsdynaMuscleUniform.mark,...
             'Color',lineColor,...
             'MarkerFaceColor',lineColor,...
             'LineWidth',lineWidthModel,...
             'MarkerSize',markerSize,...
             'HandleVisibility','off');
        hold on;
        plot([lp0,lp0],[fp0,fp0+3*yDelta],...
             'Color',[1,1,1],...
             'LineWidth',1,...
             'HandleVisibility','off');
        hold on;
        plot([lp0,lp0],[fp0,fp0+3*yDelta],...
             'Color',[0,0,0],...
             'LineWidth',0.5,...
             'HandleVisibility','off');
        hold on;
        
        text(lp0,fp0+3*yDelta,...
              sprintf('(%1.0f mm, %1.1f N)', lp0MM, fp0Newton),...
             'HorizontalAlignment','right',...
             'VerticalAlignment','bottom',...
             'FontSize',6);
        hold on;

        plot(lp1,fpeIso,...
             lsdynaMuscleUniform.mark,...
             'Color',lineColor,...
             'MarkerFaceColor',lineColor,...
             'LineWidth',lineWidthModel,...
             'MarkerSize',markerSize,...
             'HandleVisibility','off');
        hold on;
        plot([lp1-3*xDelta,lp1],[fpeIso,fpeIso],...
             'Color',[1,1,1],...
             'LineWidth',1,...
             'HandleVisibility','off');
        hold on;
        plot([lp1-3*xDelta,lp1],[fpeIso,fpeIso],...
             'Color',[0,0,0],...
             'LineWidth',0.5,...
             'HandleVisibility','off');
        hold on;        
        text(lp1-3*xDelta,fpeIso,...
              sprintf('(%1.0f mm, %1.1f N)\n %1.1f N/mm', lp1MM, fp1Newton, dfdl1),...
             'HorizontalAlignment','right',...
             'VerticalAlignment','top',...
             'FontSize',6);
        hold on;


        box off;    
        idx=1;
        xlim(plotSettings(idx).xLim);
        ylim(plotSettings(idx).yLim);
        xticks(plotSettings(idx).xTicks);
        yticks(plotSettings(idx).yTicks); 
    
        if(flag_plotInNormalizedCoordinates==1)
            xlabel('Norm. Length ($$\ell/\ell^{M}_o$$)');
            ylabel('Norm. Force ($$f/f^{M}_o$$)');             
        else
            xlabel('Path Length (mm)');
            ylabel('Tendon Force (N)');             
        end
  
        title('A. Passive force-length relations',...
              'HorizontalAlignment','right');
    
        lgdH=legend('Location','NorthWest');
        lgdH.FontSize=fontSizeLegend;
        legend box off;

    end    


    

    if(contains(simulationFile,fileNameMaxActOpt) ...
        || contains(simulationFile,fileNameSubMaxActOpt))
        subplot('Position',reshape(subPlotLayout(indexRow,3,:),1,4));        
        %subplot('Position',reshape(subPlotLayout(1,2,:),1,4));
        
        timePlot = lsdynaMuscleUniform.eloutTime(:,1);
        if(flag_plotInNormalizedCoordinates==1)
            forcePlot=lsdynaMuscleUniform.eloutAxialBeamForceNorm(:,1);
        else
            forcePlot=lsdynaMuscleUniform.eloutAxialBeamForceNorm(:,1).*maximumIsometricForce.*scaleF;
        end

        plot(   timePlot,...
                forcePlot,...
                lineType,...
                'Color',lineColor,...
                'LineWidth',lineWidthModel,...
                'DisplayName',[lsdynaMuscleUniform.nameLabel,sprintf('(%1.1f)',lsdynaMuscleUniform.act(end,1))],...
                'HandleVisibility','on');
        hold on;


        
        if(flag_plotInNormalizedCoordinates==1)
            fAN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexA,1);
            fA  = fAN;
            fBN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexB,1);
            fB  = fBN;
        else
            fAN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexA,1);
            fA  = fAN.*maximumIsometricForce.*scaleF;
            fBN = lsdynaMuscleUniform.eloutAxialBeamForceNorm(indexB,1);
            fB  = fBN.*maximumIsometricForce.*scaleF;
        end

        plot(timeA,fA,...
             lsdynaMuscleUniform.mark,...
             'Color',lineColor,...
             'MarkerFaceColor',lineColor,...
             'LineWidth',lineWidthModel,...
             'MarkerSize',markerSize,...
             'HandleVisibility','off');
        hold on;
        text(timeA,fA,'A',...
             'HorizontalAlignment','center',...
             'VerticalAlignment','bottom',...
             'Color',lineColor);
        hold on;

        plot(timeB,fB,...
             lsdynaMuscleUniform.mark,...
             'Color',lineColor,...
             'MarkerFaceColor',lineColor,...             
             'LineWidth',lineWidthModel,...
             'MarkerSize',markerSize,...
             'HandleVisibility','off');
        hold on;

        text(timeB,fB,'B',...
             'HorizontalAlignment','center',...
             'VerticalAlignment','bottom',...
             'Color',lineColor);
        hold on;
 
        if(timeEnd > 10)
            xlabel('Time (ms)');            
        else
            xlabel('Time (s)');
        end

        if(flag_plotInNormalizedCoordinates==1)
            ylabel('Norm. Tendon Force ($$f^T/f^T_o$$)');
        else
            ylabel('Tendon Force (N)');
        end
          
        title('C. Example time series data',...
              'HorizontalAlignment','right');        

        box off;
    
        idx=3;
        xlim(plotSettings(idx).xLim);
        ylim(plotSettings(idx).yLim);
        xticks(plotSettings(idx).xTicks);
        yticks(plotSettings(idx).yTicks);      

        lgdH =legend('Location','NorthWest');
        lgdH.FontSize=fontSizeLegend;
        legend box off;


        here=1;
    end

end

pause(0.1);
    

end

